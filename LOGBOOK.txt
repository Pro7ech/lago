12.10.2018 : leaerned about GitHub. Forked dedis/lago repository to Pro7ech/lago. Cloned Pro7ech/lago to local. Created biging_crt folder. Started reading about the math/big Go package. Started reading about struct and functions on struct. Started reading about pointers. Created the struct int_crt which stores an integer into its crt representation. Created functions to import 64 bits int. 

13.10.2018 : started experimenting and creating functions to import ints bigger than 64 bits. Implemented importation from ints bigger than 64bits, arithmetic and CRT. Splitted the code between the bigint package and bigint_crt package, which improved readability by a non negligeable factor. Early prototype code compiles correctly and gives correct results. Pointers gave me a hard life :/ Still did not do a .test and .benchmark code. Started coding the test functions. Read documentation on test functions. Removed the main() from the pacakge and replaced the testing with a test function. Discovered that benchmarking is .B and testing is .T.


14.10.2018 : -

15.10.2018 : continued working on the test and benchmark code
16.10.2018 : it turns out that a big problem to solve is modular arithmetic on uint64 integers without using the bigint package. The problem is how to have an efficient algorithm that can do modular arithmetic on 64 bits integers without overflow. The two options I am testing are a double and add algorithm and a single pass modular karatsuba. But they are 300 times slower than a (a*b)%q over 32bits integers using uint64
17.10.2018 : -
18.10.2018 : Improved CRT_INV speed by a factor of 10 by setting a CRT_PARAMS constant with precomputed inverses 
19.10.2018 : 